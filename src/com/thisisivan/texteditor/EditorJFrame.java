/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.thisisivan.texteditor;
import com.thisisivan.WelcomePage;
import com.thisisivan.fileprocessingandpolimorphism.MyUtils.ReadTextFile;
import com.thisisivan.fileprocessingandpolimorphism.MyUtils.WriteAs;
import com.thisisivan.fileprocessingandpolimorphism.MyUtils.WriteToFile;

import javax.swing.*;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;

/**
 *
 * @author User
 */
public class EditorJFrame extends JFrame {

    boolean isSaved = false;
    boolean checkedSave = false;
    boolean firstTimeSave = true;
    private String filePath;
    WelcomePage welcomePage;


    /**
     * Creates new form EditorJFrame
     */
    public EditorJFrame() {
        initComponents();
    }
    public EditorJFrame(WelcomePage welcomePage) {
        initComponents();
        this.welcomePage = welcomePage;
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenu3 = new JMenu();
        jMenu4 = new JMenu();
        jMenuItem1 = new JMenuItem();
        jMenu6 = new JMenu();
        jMenu7 = new JMenu();
        jMenu9 = new JMenu();
        jScrollPane1 = new JScrollPane();
        jEditorText = new JEditorPane();
        jMenuBar1 = new JMenuBar();
        jMenu1 = new JMenu();
        jMenuNew = new JMenuItem();
        jMenuOpen = new JMenuItem();
        jMenuSave = new JMenuItem();
        jMenuSaveAs = new JMenu();
        jMenuSaveAsDoc = new JMenuItem();
        jMenuSaveAsTxt = new JMenuItem();
        jMenuExit = new JMenuItem();
        jMenu2 = new JMenu();
        jMenuSelectAll = new JMenuItem();
        jMenuICut = new JMenuItem();
        jMenuICopy = new JMenuItem();
        jMenuIPaste = new JMenuItem();
        jMenu8 = new JMenu();
        jMenuItem8 = new JMenuItem();

        jMenu3.setText("jMenu3");

        jMenu4.setText("jMenu4");

        jMenuItem1.setText("jMenuItem1");

        jMenu6.setText("jMenu6");

        jMenu7.setText("jMenu7");

        jMenu9.setText("jMenu9");


        // Set Closing Operation and add listener to open a confirmation window.
        setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);

        WindowListener exitListener = new WindowAdapter() {

            @Override
            public void windowClosing(WindowEvent e) {
                int confirm = JOptionPane.showOptionDialog(
                        null, "Are You Sure to Close Application?",
                        "Exit Confirmation", JOptionPane.YES_NO_OPTION,
                        JOptionPane.QUESTION_MESSAGE, null, null, null);
                if (confirm == 0) {
                   Close();
                }
            }
        };
        this.addWindowListener(exitListener);


        setBackground(new java.awt.Color(34, 49, 63));
        setFont(new java.awt.Font("Segoe UI Light", 0, 12)); // NOI18N
        setForeground(new java.awt.Color(150, 153, 165));

        jScrollPane1.setForeground(new java.awt.Color(150, 153, 165));

        jEditorText.setEditable(true);
        jEditorText.setBackground(new java.awt.Color(65, 68, 80));
        jEditorText.setFont(new java.awt.Font("Segoe UI Light", 0, 14)); // NOI18N
        jEditorText.setForeground(new java.awt.Color(150, 153, 165));
        jScrollPane1.setViewportView(jEditorText);

        jMenuBar1.setBackground(new java.awt.Color(34, 49, 63));
        jMenuBar1.setForeground(new java.awt.Color(150, 153, 165));

        jMenu1.setBackground(new java.awt.Color(34, 49, 63));
        jMenu1.setForeground(new java.awt.Color(150, 153, 165));
        jMenu1.setMnemonic('F');
        jMenu1.setText("File");

        jMenuNew.setAccelerator(KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuNew.setBackground(new java.awt.Color(34, 49, 63));
        jMenuNew.setForeground(new java.awt.Color(150, 153, 165));
        jMenuNew.setMnemonic('N');
        jMenuNew.setText("New");
        jMenuNew.setName("jMenuNew"); // NOI18N
        jMenuNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuNewActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuNew);

        jMenuOpen.setAccelerator(KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuOpen.setBackground(new java.awt.Color(34, 49, 63));
        jMenuOpen.setForeground(new java.awt.Color(150, 153, 165));
        jMenuOpen.setMnemonic('O');
        jMenuOpen.setText("Open");
        jMenuOpen.setName("jMenuOpen"); // NOI18N
        jMenuOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuOpenActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuOpen);

        jMenuSave.setAccelerator(KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuSave.setBackground(new java.awt.Color(34, 49, 63));
        jMenuSave.setForeground(new java.awt.Color(150, 153, 165));
        jMenuSave.setMnemonic('s');
        jMenuSave.setText("Save");
        jMenuSave.setName("jMenuSave"); // NOI18N
        jMenuSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuSaveActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuSave);

        jMenuSaveAs.setBackground(new java.awt.Color(34, 49, 63));
        jMenuSaveAs.setForeground(new java.awt.Color(150, 153, 165));
        jMenuSaveAs.setMnemonic('S');
        jMenuSaveAs.setText("Save As");

        jMenuSaveAsDoc.setAccelerator(KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuSaveAsDoc.setBackground(new java.awt.Color(34, 49, 63));
        jMenuSaveAsDoc.setForeground(new java.awt.Color(150, 153, 165));
        jMenuSaveAsDoc.setMnemonic('S');
        jMenuSaveAsDoc.setText("Save As .doc");
        jMenuSaveAsDoc.setName("jMenuSaveAsDoc"); // NOI18N
        jMenuSaveAsDoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuSaveAsDocActionPerformed(evt);
            }
        });
        jMenuSaveAs.add(jMenuSaveAsDoc);

        jMenuSaveAsTxt.setAccelerator(KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_T, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuSaveAsTxt.setBackground(new java.awt.Color(34, 49, 63));
        jMenuSaveAsTxt.setForeground(new java.awt.Color(150, 153, 165));
        jMenuSaveAsTxt.setText("Save As .txt");
        jMenuSaveAsTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuSaveAsTxtActionPerformed(evt);
            }
        });
        jMenuSaveAs.add(jMenuSaveAsTxt);

        jMenu1.add(jMenuSaveAs);

        jMenuExit.setAccelerator(KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, 0));
        jMenuExit.setBackground(new java.awt.Color(34, 49, 63));
        jMenuExit.setForeground(new java.awt.Color(150, 153, 165));
        jMenuExit.setMnemonic('X');
        jMenuExit.setText("Exit");
        jMenuExit.setName("jMenuExit"); // NOI18N
        jMenuExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuExitActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuExit);

        jMenuBar1.add(jMenu1);

        jMenu2.setBackground(new java.awt.Color(34, 49, 63));
        jMenu2.setForeground(new java.awt.Color(150, 153, 165));
        jMenu2.setMnemonic('E');
        jMenu2.setText("Edit");

        jMenuSelectAll.setAccelerator(KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuSelectAll.setBackground(new java.awt.Color(34, 49, 63));
        jMenuSelectAll.setForeground(new java.awt.Color(150, 153, 165));
        jMenuSelectAll.setText("Select All");
        jMenuSelectAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuSelectAllActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuSelectAll);

        jMenuICut.setAccelerator(KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuICut.setBackground(new java.awt.Color(34, 49, 63));
        jMenuICut.setForeground(new java.awt.Color(150, 153, 165));
        jMenuICut.setText("Cut");
        jMenuICut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuICutActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuICut);

        jMenuICopy.setAccelerator(KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuICopy.setBackground(new java.awt.Color(34, 49, 63));
        jMenuICopy.setForeground(new java.awt.Color(150, 153, 165));
        jMenuICopy.setText("Copy");
        jMenuICopy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuICopyActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuICopy);

        jMenuIPaste.setAccelerator(KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuIPaste.setBackground(new java.awt.Color(34, 49, 63));
        jMenuIPaste.setForeground(new java.awt.Color(150, 153, 165));
        jMenuIPaste.setText("Paste");
        jMenuIPaste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuIPasteActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuIPaste);

        jMenuBar1.add(jMenu2);

        jMenu8.setBackground(new java.awt.Color(34, 49, 63));
        jMenu8.setForeground(new java.awt.Color(150, 153, 165));
        jMenu8.setText("Help");

        jMenuItem8.setBackground(new java.awt.Color(34, 49, 63));
        jMenuItem8.setForeground(new java.awt.Color(150, 153, 165));
        jMenuItem8.setText("Created by Ivan K");
        jMenuItem8.setName("jMenuHelp"); // NOI18N
        jMenu8.add(jMenuItem8);

        jMenuBar1.add(jMenu8);

        setJMenuBar(jMenuBar1);

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, GroupLayout.Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 765, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, GroupLayout.DEFAULT_SIZE, 401, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuSelectAllActionPerformed(java.awt.event.ActionEvent evt) {
       jEditorText.selectAll();
    }                                               

    private void jMenuICutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuICutActionPerformed
        jEditorText.cut();
       
    }//GEN-LAST:event_jMenuICutActionPerformed

    private void jMenuICopyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuICopyActionPerformed
        jEditorText.copy();
    }//GEN-LAST:event_jMenuICopyActionPerformed

    private void jMenuIPasteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuIPasteActionPerformed
        jEditorText.paste();
    }//GEN-LAST:event_jMenuIPasteActionPerformed

    private void jMenuNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuNewActionPerformed
        // Reset all checks
        filePath = null;
        firstTimeSave = true;
        checkedSave = false;

        jEditorText.setText("");
    }//GEN-LAST:event_jMenuNewActionPerformed

    //region File menu actions

    // Open File and choose a file to open
    private void jMenuOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuOpenActionPerformed
        ReadTextFile readTextFile = new ReadTextFile();
        String str;
        try
        {
            str = readTextFile.ReadFile();
            if (str.equals(""))
            {
                throw new NullPointerException("The file you are accessing might be empty");
            }
            //textArea.read(br,null);
            jEditorText.setText(str);
        }
        catch (NullPointerException npe)
        {
            JOptionPane.showMessageDialog(null, npe, "InfoBox: Empty file", JOptionPane.INFORMATION_MESSAGE);
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, "Failed to complete this process!", "InfoBox: Error", JOptionPane.INFORMATION_MESSAGE);
        }
        finally
        {
            jEditorText.requestFocus();
        }
    }//GEN-LAST:event_jMenuOpenActionPerformed

    private void jMenuSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuSaveActionPerformed
        try
        {
            if(firstTimeSave)
            {
                filePath = WriteToFile.WriteToAs(jEditorText.getText(), WriteAs.doc);
                if(filePath != null)
                    JOptionPane.showMessageDialog(null, "File saved as doc!", "InfoBox", JOptionPane.INFORMATION_MESSAGE);
                firstTimeSave = false;
            }
            else
            {
                if(filePath != null)
                {
                    WriteToFile.WriteTo(jEditorText, filePath);
                    if(filePath != null)
                        JOptionPane.showMessageDialog(null, "File saved!", "InfoBox", JOptionPane.INFORMATION_MESSAGE);
                }
            }
            jEditorText.requestFocus();
        }
        catch (Exception e)
        {

        }
    }//GEN-LAST:event_jMenuSaveActionPerformed

    private void jMenuSaveAsTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuSaveAsTxtActionPerformed
        filePath = WriteToFile.WriteToAs(jEditorText.getText(), WriteAs.txt);
        if(filePath != null)
            JOptionPane.showMessageDialog(null, "File saved as txt!", "InfoBox", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_jMenuSaveAsTxtActionPerformed

    private void jMenuSaveAsDocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuSaveAsDocActionPerformed
        filePath = WriteToFile.WriteToAs(jEditorText.getText(), WriteAs.doc);
        if(filePath != null)
            JOptionPane.showMessageDialog(null, "File saved as doc!", "InfoBox", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_jMenuSaveAsDocActionPerformed

    private void jMenuExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuExitActionPerformed
        if(isSaved)
        {
            this.dispose();
        }
        else
        {
            IsSavedDialog();
        }
    }//GEN-LAST:event_jMenuExitActionPerformed

    private void IsSavedDialog()
    {
        if(!checkedSave)
        {
            JOptionPane.showMessageDialog(this, "Do not forget to save!");
            checkedSave = true;
        }
    }

    private void Close()
    {
        welcomePage.setVisible(true);
        System.out.println("Close this form");
        this.dispose();
    }

//endregion


       
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (UIManager.LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EditorJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EditorJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EditorJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EditorJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EditorJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JEditorPane jEditorText;
    private JMenu jMenu1;
    private JMenu jMenu2;
    private JMenu jMenu3;
    private JMenu jMenu4;
    private JMenu jMenu6;
    private JMenu jMenu7;
    private JMenu jMenu8;
    private JMenu jMenu9;
    private JMenuBar jMenuBar1;
    private JMenuItem jMenuExit;
    private JMenuItem jMenuICopy;
    private JMenuItem jMenuICut;
    private JMenuItem jMenuIPaste;
    private JMenuItem jMenuItem1;
    private JMenuItem jMenuItem8;
    private JMenuItem jMenuNew;
    private JMenuItem jMenuOpen;
    private JMenuItem jMenuSave;
    private JMenu jMenuSaveAs;
    private JMenuItem jMenuSaveAsDoc;
    private JMenuItem jMenuSaveAsTxt;
    private JMenuItem jMenuSelectAll;
    private JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
